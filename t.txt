- main.go
- config
    - config.go
- controllers
    - auth.go
    - post.go
- models
    - user.go
    - post.go
    - comment.go
    - category.go
    - like.go
- routes
    - routes.go
- templates
    - base.html
    - home.html
    - login.html
    - register.html
    - create_post.html
    - create_comment.html
- static
    - css
        - style.css
    - js
        - script.js






        fetch("/get-post-likes", {
  method: "GET"
})
  .then(response => response.json())
  .then(data => {
    // Handle the like data
    console.log(data, 'this is the data');

    for (const likeData of data) {
      const postId = likeData.postId;
      const value = likeData.value;
      const likeButton = document.getElementById(`${postId}-like`);
      if (value == 1) {
        if (likeButton) {
          toggleLiked(likeButton)
          console.log("toggleLiked it up still")
        }
      } else {
        const dislikeButton = document.getElementById(`${postId}-dislike`);
        toggleDisliked(dislikeButton)

      }

    }
  })
  .catch(error => {
    console.error("Error with the posts toggleLiked data is:", error);
    // Handle the error
  });

function toggleLiked(likeButton) {
  likeButton.classList.toggle('liked')
  likeButton.classList.toggle('fa-thumbs-o-up')
  likeButton.classList.toggle('fa-thumbs-up');
}


function toggleDisliked(dislikeButton) {
  dislikeButton.classList.toggle('disliked')
  dislikeButton.classList.toggle('fa-thumbs-o-down')
  dislikeButton.classList.toggle('fa-thumbs-down')
}

function increment(postId, id) {
  const dislikeCountElement = document.getElementById(`${postId}-${id}`);
  const dislikeCountText = dislikeCountElement.textContent;
  const dislikeCountValue = parseInt(dislikeCountText);
  const incrementedCount = dislikeCountValue + 1;
  dislikeCountElement.textContent = incrementedCount.toString();
}

function decrement(postId, id) {
  const dislikeCountElement = document.getElementById(`${postId}-${id}`);
  const dislikeCountText = dislikeCountElement.textContent;
  const dislikeCountValue = parseInt(dislikeCountText);
  const decrementedCount = dislikeCountValue - 1;
  dislikeCountElement.textContent = decrementedCount.toString();
}



const likes = document.querySelectorAll('.likes')

likes.forEach(likeButton => {
  console.log("a post")
  const likeStr = likeButton.getAttribute('id');
  const postId = likeStr.split('-')[0]; // This will split the likeId string at the '-' character
  const dislikeButton = document.getElementById(`${postId}-dislike`)

  console.log(postId, "mans up inna da ting uno"); // Outputs: [part1, part2, ...]


  likeButton.addEventListener('click', () => {
    // toggle like button 
    toggleLiked(likeButton)



    if (likeButton.classList.contains('liked')) {
      // send like req to server
      console.log("we liking suttin")
      increment(postId, 1)
      if (dislikeButton.classList.contains('disliked')) {
        toggleDisliked(dislikeButton)
        decrement(postId, 2)
        // send req to remove dislike
        handleLikeAction(postId, "removeDislike")
      }
      handleLikeAction(postId, "like")
    } else {
      //send unlike req
      console.log("we unliking suttin")
      handleLikeAction(postId, "unlike")
      decrement(postId, 1)
    }



  })

  dislikeButton.addEventListener('click', () => {
    // toggle like button 
    toggleDisliked(dislikeButton)


    if (dislikeButton.classList.contains('disliked')) {
      // send dislike req to server
      console.log("we disliking suttin")
      increment(postId, 2)
      if (likeButton.classList.contains('liked')) {
        toggleLiked(likeButton)
        decrement(postId, 1)
        // send req to remove like
        handleLikeAction(postId, "unlike")
      }
      handleLikeAction(postId, "dislike")
    } else {
      //send remove dislike req
      decrement(postId, 2)
      console.log("we removing dislike")
      handleLikeAction(postId, "removeDislike")
    }


  })

})   func GetPostLikes(w http.ResponseWriter, r *http.Request) {

	user, err := m.GetUserByCookie(r)
	if err != nil {
		fmt.Println("no cookie tring to get user liked posts", err)
		return
	}
	likesData, err := m.GetLikedPosts(user.ID)
	if err != nil {
		fmt.Println("error with suttin")
	}
	err1 := json.NewEncoder(w).Encode(likesData)
	if err1 != nil {
		fmt.Println("cant encode suttin")
	}
}  func GetLikedPosts(userId int) ([]LikeData, error) {
	query := `
		SELECT postId, value
		FROM likes
		WHERE userId = ?
	`
	rows, err := db.Query(query, userId)
	if err != nil {
		fmt.Println("error like.go", err)
		return nil, err
	}

	likesData := make([]LikeData, 0)

	for rows.Next() {

		var PostId, value int
		err := rows.Scan(&PostId, &value)
		if err != nil {
			return nil, err
		}

		LikeData := LikeData{
			PostId: PostId,
			Value:  value,
		}

		likesData = append(likesData, LikeData)

	}

	return likesData, nil

}
   {{ range .Posts}}
            <div class="post">
                <div class="post-header">
                    <span class="post-user"><i class="fa fa-user-circle" aria-hidden="true"></i>
                        {{ .Username }}</span>
                    <span class="post-categories">Categories: {{ range .Categories }}{{ . }} {{ end }}</span>
                </div>
                <h3 class="post-title">{{.Title}}</h3>
                <p class="post-content" style="font-weight:100; ">{{ .Content }}</p>
                <div class="footer">
                    <span><i class="fa fa-thumbs-o-up likes" id="{{.ID}}-like" style="cursor: pointer;"></i><span
                            id="{{.ID}}-1">{{.Likes }}</span></span>
                    <span><i class="fa fa-thumbs-o-down dislikes" id="{{.ID}}-dislike" style="cursor: pointer;"></i>
                        <span id="{{.ID}}-2">{{ .Dislikes }}</span></span>

                    <span><i class="fa fa-comment"></i> comment</span>
                </div>
            </div>
            {{end}}
        </main> when i 
